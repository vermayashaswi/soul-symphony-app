// Enhanced response generation utilities
import { CacheManager } from './cacheManager.ts';
import { OptimizedApiClient } from './optimizedApiClient.ts';

export function generateSystemPrompt(
  userTimezone: string,
  timeRange?: any,
  queryType?: string,
  entryCount?: number,
  analysisScope?: string,
  conversationContext?: any[],
  isFollowUp?: boolean,
  hasPersonalPronouns?: boolean,
  hasTimeReference?: boolean
): string {
  const currentDate = new Date().toISOString();
  
  let contextualInfo = `Current date and time: ${currentDate}
User timezone: ${userTimezone || 'UTC'}`;
  
  if (entryCount) {
    contextualInfo += `\nThe user has ${entryCount} total journal entries`;
  }
  
  if (analysisScope) {
    contextualInfo += `\nAnalysis scope: ${analysisScope}`;
  }
  
  if (timeRange) {
    const startStr = timeRange.startDate ? new Date(timeRange.startDate).toLocaleDateString() : 'start';
    const endStr = timeRange.endDate ? new Date(timeRange.endDate).toLocaleDateString() : 'end';
    contextualInfo += `\nQuery timeframe: ${startStr} to ${endStr}`;
  }
  
  if (conversationContext && conversationContext.length > 0) {
    contextualInfo += `\nThis is part of an ongoing conversation with ${conversationContext.length} previous messages`;
  }
  
  if (isFollowUp) {
    contextualInfo += `\nThis is a follow-up question expanding on a previous analysis`;
  }
  
  if (hasPersonalPronouns) {
    contextualInfo += `\nThis is a personal therapeutic assessment using personal pronouns`;
  } else {
    contextualInfo += `\nThis is general mental health guidance`;
  }
  
  if (hasTimeReference) {
    contextualInfo += `\nSpecific time reference detected in the query`;
  }
  
  if (queryType === 'aggregated') {
    contextualInfo += `\nThis is an aggregation query. Focus on providing statistical insights, patterns, and quantitative analysis.`;
  } else if (queryType === 'analysis') {
    contextualInfo += `\nThis is an analysis query. Focus on identifying patterns, trends, and providing deep insights.`;
  }

  return `You are SOULo, an AI mental health therapist assistant that helps users understand their journal entries and emotional patterns through evidence-based therapeutic analysis.

THERAPEUTIC IDENTITY & APPROACH: You are trained in multiple therapeutic modalities including Cognitive Behavioral Therapy (CBT), Dialectical Behavior Therapy (DBT), and mindfulness-based approaches.

${contextualInfo}

CRITICAL EMOTION ANALYSIS INSTRUCTIONS:
• You have access to PRE-CALCULATED emotion scores from the database (0.0 to 1.0 scale)
• These scores were generated by advanced AI analysis of the journal content
• DO NOT attempt to infer emotions from the text snippets - use ONLY the provided scores
• Focus on quantitative therapeutic analysis: emotional patterns, regulation strategies, score distributions
• When you see "Score: 0.842" this means that emotion was detected with 84.2% intensity
• NEVER say "your entries don't explicitly mention emotions" - the emotions are already calculated

RESPONSE GUIDELINES:
- Be conversational and supportive, not clinical or formal
- Use natural, therapeutic language that feels like talking to a caring counselor
- Provide evidence-based insights while maintaining warmth
- Keep responses under 250 words for simple queries, longer for complex assessments
- Use markdown formatting naturally (**bold** for emphasis, ## for headers when needed)
- Reference specific dates and emotional scores when relevant
- Provide actionable, personalized recommendations
- Maintain professional therapeutic boundaries while being approachable
- If crisis indicators are present, respond with appropriate care and resources

Remember: You're a supportive AI therapist, not a medical report generator. Be warm, insightful, and genuinely helpful.`;
}

export function formatJournalEntriesForAnalysis(entries: any[]): string {
  // Limit entries for performance while maintaining quality
  const limitedEntries = entries.slice(0, 15);
  
  return limitedEntries.map(entry => {
    const date = new Date(entry.created_at).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
    
    let emotionInfo = '';
    if (entry.emotions && typeof entry.emotions === 'object') {
      const emotions = Object.entries(entry.emotions)
        .filter(([_, score]) => typeof score === 'number' && score > 0.3)
        .sort(([_, a], [__, b]) => (b as number) - (a as number))
        .slice(0, 3)
        .map(([emotion, score]) => `${emotion}: ${(score as number).toFixed(2)}`)
        .join(', ');
      
      if (emotions) {
        emotionInfo = `\nEmotions: ${emotions}`;
      }
    }
    
    let themeInfo = '';
    if (entry.master_themes && Array.isArray(entry.master_themes)) {
      themeInfo = `\nThemes: ${entry.master_themes.slice(0, 3).join(', ')}`;
    }
    
    // Limit content length for performance
    const content = entry.content.substring(0, 300) + (entry.content.length > 300 ? '...' : '');
    
    return `Entry from ${date}: ${content}${emotionInfo}${themeInfo}`;
  }).join('\n\n');
}

export function generateUserPrompt(message: string, entries: any[]): string {
  const formattedEntries = formatJournalEntriesForAnalysis(entries);
  
  return `Based on these journal entries: 

${formattedEntries}

User question: ${message}

Please provide a thoughtful, conversational response based on the journal entry data. Focus on being supportive and insightful while using the pre-calculated emotion scores and data patterns.`;
}

export async function generateResponse(
  systemPrompt: string,
  userPrompt: string,
  conversationContext: any[] = [],
  openAiApiKey: string
): Promise<string> {
  try {
    console.log('[responseGenerator] Starting optimized response generation...');
    
    // Check cache first
    const cacheKey = CacheManager.generateQueryHash(userPrompt, 'system', null);
    const cachedResponse = CacheManager.getCachedResponse(cacheKey);
    
    if (cachedResponse) {
      console.log('[responseGenerator] Using cached response');
      return cachedResponse;
    }
    
    // Use last 8 messages for context instead of 5
    const contextMessages = Array.isArray(conversationContext) ? conversationContext.slice(-8) : [];
    console.log(`[responseGenerator] Using ${contextMessages.length} conversation messages for context`);
    
    // Use optimized API client with 8 message context
    const response = await OptimizedApiClient.generateResponseOptimized(
      systemPrompt,
      userPrompt,
      contextMessages, // Pass 8 messages instead of limited context
      openAiApiKey
    );
    
    // Cache the response
    CacheManager.setCachedResponse(cacheKey, response);
    
    console.log('[responseGenerator] Successfully generated and cached response with 8-message context');
    return response;
    
  } catch (error) {
    console.error('[responseGenerator] Error generating response:', error);
    throw error;
  }
}
