
// Enhanced response generation utilities with structured formatting
import { CacheManager } from './cacheManager.ts';
import { OptimizedApiClient } from './optimizedApiClient.ts';

export function generateSystemPrompt(
  userTimezone: string,
  timeRange?: any,
  queryType?: string,
  entryCount?: number,
  analysisScope?: string,
  conversationContext?: any[],
  isFollowUp?: boolean,
  hasPersonalPronouns?: boolean,
  hasTimeReference?: boolean,
  searchMethod?: string
): string {
  const currentDate = new Date().toISOString();
  
  let contextualInfo = `Current date and time: ${currentDate}
User timezone: ${userTimezone || 'UTC'}`;
  
  if (entryCount) {
    contextualInfo += `\nThe user has ${entryCount} total journal entries`;
  }
  
  if (analysisScope) {
    contextualInfo += `\nAnalysis scope: ${analysisScope}`;
  }
  
  if (timeRange) {
    const startStr = timeRange.startDate ? new Date(timeRange.startDate).toLocaleDateString() : 'start';
    const endStr = timeRange.endDate ? new Date(timeRange.endDate).toLocaleDateString() : 'end';
    contextualInfo += `\nQuery timeframe: ${startStr} to ${endStr}`;
  }
  
  if (searchMethod) {
    contextualInfo += `\nSearch method used: ${searchMethod} (dual vector + SQL search)`;
  }

  // Detect if this requires analytical formatting
  const isAnalyticalQuery = queryType === 'analysis' || 
    queryType === 'aggregated' ||
    /\b(pattern|trend|when do|what time|how often|frequency|usually|typically|statistics|insights|breakdown|analysis)\b/i.test(analysisScope || '');

  let systemPrompt = `You are SOULo, an AI mental health therapist assistant that helps users understand their journal entries and emotional patterns through evidence-based therapeutic analysis.

THERAPEUTIC IDENTITY & APPROACH: You are trained in multiple therapeutic modalities including Cognitive Behavioral Therapy (CBT), Dialectical Behavior Therapy (DBT), and mindfulness-based approaches.

${contextualInfo}

CRITICAL EMOTION ANALYSIS INSTRUCTIONS:
• You have access to PRE-CALCULATED emotion scores from the database (0.0 to 1.0 scale)
• These scores were generated by advanced AI analysis of the journal content
• DO NOT attempt to infer emotions from the text snippets - use ONLY the provided scores
• Focus on quantitative therapeutic analysis: emotional patterns, regulation strategies, score distributions
• When you see "Score: 0.842" this means that emotion was detected with 84.2% intensity
• NEVER say "your entries don't explicitly mention emotions" - the emotions are already calculated`;

  if (isAnalyticalQuery) {
    systemPrompt += `

CRITICAL FORMATTING REQUIREMENTS FOR ANALYTICAL RESPONSES:
• Use clear headers with ## markdown formatting for major sections
• Structure information with bullet points using - for lists
• Use **bold text** for key insights, data points, and important findings
• Create logical sections: Key Insights, Patterns Identified, Recommendations
• Include specific data points, times, frequencies, and statistics when available
• Make responses scannable and well-organized with clear visual hierarchy
• Use numbered lists for step-by-step insights or rankings
• Always start with a brief overview, then provide detailed analysis

REQUIRED RESPONSE STRUCTURE FOR ANALYTICAL QUERIES:
## Key Insights
- **Primary finding**: [main insight with specific data]
- **Supporting evidence**: [specific evidence from entries]

## Patterns Identified  
- **Pattern 1**: [description with frequency/timing data]
- **Pattern 2**: [description with specific examples]

## Recommendations
- [Actionable therapeutic suggestion based on analysis]

FORMATTING EXAMPLES:
✅ "**Peak journaling time**: 9-11 PM (appeared in 73% of entries)"
✅ "**Emotional pattern**: Anxiety levels highest on **Mondays** (avg score 0.72)"
✅ "**Theme frequency**: Work stress mentioned in **8 out of 12** recent entries"`;
  }

  systemPrompt += `

RESPONSE GUIDELINES:
- Be conversational and supportive, not clinical or formal
- Use natural, therapeutic language that feels like talking to a caring counselor
- Provide evidence-based insights while maintaining warmth
- Keep responses under 300 words for simple queries, longer for complex assessments
- Reference specific dates and emotional scores when relevant
- Provide actionable, personalized recommendations
- Maintain professional therapeutic boundaries while being approachable
- If crisis indicators are present, respond with appropriate care and resources

Remember: You're a supportive AI therapist, not a medical report generator. Be warm, insightful, and genuinely helpful.`;

  return systemPrompt;
}

export function formatJournalEntriesForAnalysis(entries: any[], searchMethod?: string): string {
  // Limit entries for performance while maintaining quality
  const limitedEntries = entries.slice(0, 20);
  
  let formattedContent = '';
  
  if (searchMethod === 'dual') {
    formattedContent += `Search Results (Combined Vector + SQL Analysis):\n\n`;
  }
  
  formattedContent += limitedEntries.map(entry => {
    const date = new Date(entry.created_at).toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    let emotionInfo = '';
    if (entry.emotions && typeof entry.emotions === 'object') {
      const emotions = Object.entries(entry.emotions)
        .filter(([_, score]) => typeof score === 'number' && score > 0.3)
        .sort(([_, a], [__, b]) => (b as number) - (a as number))
        .slice(0, 4)
        .map(([emotion, score]) => `${emotion}: ${(score as number).toFixed(2)}`)
        .join(', ');
      
      if (emotions) {
        emotionInfo = `\nEmotion Scores: ${emotions}`;
      }
    }
    
    let themeInfo = '';
    if (entry.master_themes && Array.isArray(entry.master_themes)) {
      themeInfo = `\nThemes: ${entry.master_themes.slice(0, 3).join(', ')}`;
    }

    let searchInfo = '';
    if (entry.searchMethod) {
      searchInfo = `\nFound via: ${entry.searchMethod} search`;
    }
    
    // Limit content length for performance
    const content = entry.content.substring(0, 350) + (entry.content.length > 350 ? '...' : '');
    
    return `Entry from ${date}: ${content}${emotionInfo}${themeInfo}${searchInfo}`;
  }).join('\n\n');

  return formattedContent;
}

export function generateUserPrompt(message: string, entries: any[], searchMethod?: string): string {
  const formattedEntries = formatJournalEntriesForAnalysis(entries, searchMethod);
  
  return `Based on these journal entries found using ${searchMethod || 'advanced'} search: 

${formattedEntries}

User question: ${message}

Please provide a thoughtful, well-structured response based on the journal entry data. Use the pre-calculated emotion scores and data patterns to provide insights. If this is an analytical query, use proper formatting with headers, bullet points, and bold text for key findings.`;
}

export async function generateResponse(
  systemPrompt: string,
  userPrompt: string,
  conversationContext: any[] = [],
  openAiApiKey: string,
  isAnalyticalQuery: boolean = false
): Promise<string> {
  try {
    console.log('[responseGenerator] Starting enhanced response generation with dual search formatting...');
    
    // Check cache first
    const cacheKey = CacheManager.generateQueryHash(userPrompt, 'system', { analytical: isAnalyticalQuery });
    const cachedResponse = CacheManager.getCachedResponse(cacheKey);
    
    if (cachedResponse) {
      console.log('[responseGenerator] Using cached response');
      return cachedResponse;
    }
    
    // Use last 8 messages for context
    const contextMessages = Array.isArray(conversationContext) ? conversationContext.slice(-8) : [];
    console.log(`[responseGenerator] Using ${contextMessages.length} conversation messages for context`);
    
    // Use optimized API client with analytical formatting detection
    const response = await OptimizedApiClient.generateResponseOptimized(
      systemPrompt,
      userPrompt,
      contextMessages,
      openAiApiKey,
      isAnalyticalQuery
    );
    
    // Cache the response
    CacheManager.setCachedResponse(cacheKey, response);
    
    console.log('[responseGenerator] Successfully generated and cached enhanced response');
    return response;
    
  } catch (error) {
    console.error('[responseGenerator] Error generating response:', error);
    throw error;
  }
}
