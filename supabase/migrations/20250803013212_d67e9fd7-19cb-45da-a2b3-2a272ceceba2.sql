-- Create rate limiting function
CREATE OR REPLACE FUNCTION public.check_rate_limit(
  p_user_id uuid DEFAULT NULL,
  p_ip_address text DEFAULT NULL,
  p_function_name text DEFAULT 'unknown'
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path TO 'public'
AS $$
DECLARE
  user_requests_per_minute integer := 0;
  user_requests_per_hour integer := 0;
  ip_requests_per_minute integer := 0;
  ip_requests_per_hour integer := 0;
  user_limit_per_minute integer := 60;
  user_limit_per_hour integer := 1000;
  ip_limit_per_minute integer := 100;
  ip_limit_per_hour integer := 2000;
BEGIN
  -- Count user requests if user_id provided
  IF p_user_id IS NOT NULL THEN
    SELECT COUNT(*) INTO user_requests_per_minute
    FROM api_usage
    WHERE user_id = p_user_id
      AND function_name = p_function_name
      AND created_at >= NOW() - INTERVAL '1 minute';
      
    SELECT COUNT(*) INTO user_requests_per_hour
    FROM api_usage
    WHERE user_id = p_user_id
      AND function_name = p_function_name
      AND created_at >= NOW() - INTERVAL '1 hour';
  END IF;
  
  -- Count IP requests if ip_address provided
  IF p_ip_address IS NOT NULL THEN
    SELECT COUNT(*) INTO ip_requests_per_minute
    FROM api_usage
    WHERE ip_address = p_ip_address
      AND function_name = p_function_name
      AND created_at >= NOW() - INTERVAL '1 minute';
      
    SELECT COUNT(*) INTO ip_requests_per_hour
    FROM api_usage
    WHERE ip_address = p_ip_address
      AND function_name = p_function_name
      AND created_at >= NOW() - INTERVAL '1 hour';
  END IF;
  
  -- Check if limits exceeded
  IF (p_user_id IS NOT NULL AND (user_requests_per_minute >= user_limit_per_minute OR user_requests_per_hour >= user_limit_per_hour)) OR
     (p_ip_address IS NOT NULL AND (ip_requests_per_minute >= ip_limit_per_minute OR ip_requests_per_hour >= ip_limit_per_hour)) THEN
    RETURN jsonb_build_object(
      'allowed', false,
      'user_requests_per_minute', user_requests_per_minute,
      'user_requests_per_hour', user_requests_per_hour,
      'user_limit_per_minute', user_limit_per_minute,
      'user_limit_per_hour', user_limit_per_hour,
      'ip_requests_per_minute', ip_requests_per_minute,
      'ip_requests_per_hour', ip_requests_per_hour,
      'ip_limit_per_minute', ip_limit_per_minute,
      'ip_limit_per_hour', ip_limit_per_hour
    );
  END IF;
  
  RETURN jsonb_build_object(
    'allowed', true,
    'user_requests_per_minute', user_requests_per_minute,
    'user_requests_per_hour', user_requests_per_hour,
    'user_limit_per_minute', user_limit_per_minute,
    'user_limit_per_hour', user_limit_per_hour,
    'ip_requests_per_minute', ip_requests_per_minute,
    'ip_requests_per_hour', ip_requests_per_hour,
    'ip_limit_per_minute', ip_limit_per_minute,
    'ip_limit_per_hour', ip_limit_per_hour
  );
END;
$$;

-- Create API usage logging function
CREATE OR REPLACE FUNCTION public.log_api_usage(
  p_user_id uuid DEFAULT NULL,
  p_ip_address text DEFAULT NULL,
  p_function_name text DEFAULT 'unknown',
  p_endpoint text DEFAULT NULL,
  p_request_method text DEFAULT 'POST',
  p_status_code integer DEFAULT 200,
  p_response_time_ms integer DEFAULT NULL,
  p_tokens_used integer DEFAULT NULL,
  p_cost_usd numeric DEFAULT NULL,
  p_error_message text DEFAULT NULL,
  p_rate_limit_hit boolean DEFAULT false
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path TO 'public'
AS $$
BEGIN
  INSERT INTO api_usage (
    user_id,
    ip_address,
    function_name,
    endpoint,
    request_method,
    status_code,
    response_time_ms,
    tokens_used,
    cost_usd,
    error_message,
    rate_limit_hit
  ) VALUES (
    p_user_id,
    p_ip_address,
    p_function_name,
    p_endpoint,
    p_request_method,
    p_status_code,
    p_response_time_ms,
    p_tokens_used,
    p_cost_usd,
    p_error_message,
    p_rate_limit_hit
  );
END;
$$;

-- Create api_usage table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.api_usage (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  ip_address text,
  function_name text NOT NULL DEFAULT 'unknown',
  endpoint text,
  request_method text DEFAULT 'POST',
  status_code integer DEFAULT 200,
  response_time_ms integer,
  tokens_used integer,
  cost_usd numeric(10,6),
  error_message text,
  rate_limit_hit boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Enable RLS on api_usage table
ALTER TABLE public.api_usage ENABLE ROW LEVEL SECURITY;

-- Create policy for api_usage table
CREATE POLICY "Users can view their own API usage" ON public.api_usage
  FOR SELECT USING (auth.uid() = user_id);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_api_usage_user_created ON public.api_usage(user_id, created_at);
CREATE INDEX IF NOT EXISTS idx_api_usage_ip_created ON public.api_usage(ip_address, created_at);
CREATE INDEX IF NOT EXISTS idx_api_usage_function_created ON public.api_usage(function_name, created_at);