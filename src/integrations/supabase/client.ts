
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kwnwhgucnzqxndzjayyq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3bndoZ3VjbnpxeG5kempheXlxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzMzk4ODMsImV4cCI6MjA1NzkxNTg4M30.UAB3e5b44iJa9kKT391xyJKoQmlUOtsAi-yp4UEqZrc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  global: {
    fetch: (url, options) => {
      const fetchOptions = options || {};
      const headers = new Headers(fetchOptions.headers);
      
      // Add client version for feature detection
      headers.set('x-client-version', '1.1.0');
      headers.set('x-chunking-enabled', 'true');
      
      // Add request timeout
      const timeoutController = new AbortController();
      const timeoutId = setTimeout(() => timeoutController.abort(), 15000); // 15 second timeout
      
      return fetch(url, { 
        ...fetchOptions,
        headers,
        signal: timeoutController.signal 
      }).finally(() => {
        clearTimeout(timeoutId);
      });
    }
  }
});

// Helper function to check if chunking is supported on the server
export async function isChunkingSupported(): Promise<boolean> {
  try {
    // First, try to verify edge function availability - use a simple GET request with timeout
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const healthResponse = await fetch(`${SUPABASE_URL}/functions/v1/process-journal/health`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (healthResponse.ok) {
        console.log('Edge function health check passed');
      } else {
        console.warn('Edge function health check failed with status:', healthResponse.status);
      }
    } catch (healthError) {
      console.warn('Edge function health check failed:', healthError);
      // Continue despite health check failure - try the DB check
    }
    
    // Check if the journal_chunks table exists by making a direct query
    const { data, error } = await supabase
      .from('journal_chunks')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('Error checking if chunking is supported:', error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Exception checking if chunking is supported:', error);
    return false;
  }
}

// Add a helper function to check the health of all edge functions
export async function checkEdgeFunctionsHealth(): Promise<Record<string, boolean>> {
  const functionsToCheck = ['process-journal', 'chunk-and-embed'];
  const results: Record<string, boolean> = {};
  
  for (const func of functionsToCheck) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch(`${SUPABASE_URL}/functions/v1/${func}/health`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        const data = await response.json();
        results[func] = data?.status === 'healthy';
      } else {
        results[func] = false;
      }
    } catch (error) {
      console.error(`Health check failed for ${func}:`, error);
      results[func] = false;
    }
  }
  
  return results;
}
