// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kwnwhgucnzqxndzjayyq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3bndoZ3VjbnpxeG5kempheXlxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzMzk4ODMsImV4cCI6MjA1NzkxNTg4M30.UAB3e5b44iJa9kKT391xyJKoQmlUOtsAi-yp4UEqZrc";

// Create a singleton instance with optimized storage configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'implicit',
  },
  global: {
    headers: {
      'x-client-info': 'Feelosophy App'
    },
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 1 // Reduced to avoid potential rate limiting
    }
  }
});

// For adding timeout capability to requests
export const fetchWithTimeout = async (
  url: string, 
  options: RequestInit & { timeoutMs?: number } = {}
) => {
  const { timeoutMs = 15000, ...fetchOptions } = options;
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeoutMs);
  
  try {
    const response = await fetch(url, {
      ...fetchOptions,
      signal: options.signal || controller.signal,
    });
    return response;
  } finally {
    clearTimeout(id);
  }
};

// Simple function to check if Supabase is reachable
export const checkSupabaseConnection = async () => {
  try {
    console.log('Testing Supabase connection...');
    
    // Use a reasonable timeout to prevent hanging connections
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const { data, error } = await supabase
      .from('profiles')
      .select('id')
      .limit(1)
      .abortSignal(controller.signal);
    
    clearTimeout(timeoutId);
    
    if (error) {
      console.error('Supabase connection test failed');
      return { success: false };
    }
    
    console.log('Supabase connection successful');
    return { success: true };
  } catch (err) {
    console.error('Supabase connection error');
    return { success: false };
  }
};

// Check if the journal-audio-entries bucket exists and is accessible
export const checkAudioStorage = async (userId?: string) => {
  try {
    if (!userId) {
      const { data: session } = await supabase.auth.getSession();
      userId = session.session?.user.id;
    }
    
    if (!userId) {
      return { success: false, error: 'Not authenticated' };
    }
    
    // Check if bucket exists
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error checking storage buckets:', listError);
      return { success: false, error: 'Could not list buckets' };
    }
    
    const audioBucket = buckets?.find(bucket => bucket.name === 'journal-audio-entries');
    
    if (!audioBucket) {
      return { success: false, error: 'Audio bucket does not exist' };
    }
    
    // Test if we can access it by listing files
    const { error: listFilesError } = await supabase.storage
      .from('journal-audio-entries')
      .list(userId);
      
    if (listFilesError) {
      return { 
        success: false, 
        error: 'Bucket exists but cannot be accessed: ' + listFilesError.message 
      };
    }
    
    return { success: true };
  } catch (err: any) {
    console.error('Error checking audio storage:', err);
    return { success: false, error: err.message };
  }
};
