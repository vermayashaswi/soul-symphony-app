
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kwnwhgucnzqxndzjayyq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3bndoZ3VjbnpxeG5kempheXlxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzMzk4ODMsImV4cCI6MjA1NzkxNTg4M30.UAB3e5b44iJa9kKT391xyJKoQmlUOtsAi-yp4UEqZrc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  global: {
    fetch: (url, options) => {
      const fetchOptions = options || {};
      return fetch(url, { ...fetchOptions });
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    },
    // Enhanced WebSocket configuration for mobile environments
    heartbeatIntervalMs: 30000,
    reconnectAfterMs: (tries: number) => Math.min(tries * 1000, 5000),
    logger: console.log,
    // Mobile-specific transport configuration
    transport: (typeof window !== 'undefined' && window.WebSocket) ? 'websocket' as any : 'fallback' as any,
    timeout: 7000,
    // Add mobile environment detection and fallback handling
    encode: (payload: any, callback: (data: string) => void) => {
      try {
        callback(JSON.stringify(payload));
      } catch (error) {
        console.error('[Supabase] Encoding error:', error);
        callback('{}');
      }
    },
    decode: (payload: string, callback: (decoded: any) => void) => {
      try {
        callback(JSON.parse(payload));
      } catch (error) {
        console.error('[Supabase] Decoding error:', error);
        callback({});
      }
    }
  }
});
